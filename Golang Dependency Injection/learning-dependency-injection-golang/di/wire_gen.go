// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/google/wire"
	"io"
	"learning-dependency-injection-golang/simple"
	"os"
)

// Injectors from injector.go:

func InitializedService(isError bool) (*simple.SimpleService, error) {
	simpleRepository := simple.NewSimpleRepository(isError)
	simpleService, err := simple.NewSimpleService(simpleRepository)
	if err != nil {
		return nil, err
	}
	return simpleService, nil
}

func InitializedDatabaseRepository() *simple.DatabaseRepository {
	databasePostgreSQL := simple.NewDatabasePostgreSQL()
	databaseMongoDB := simple.NewDatabaseMongoDB()
	databaseRepository := simple.NewDatabaseRepository(databasePostgreSQL, databaseMongoDB)
	return databaseRepository
}

func InitializeFooBarService() *simple.FooBarService {
	fooRepository := simple.NewFooRepository()
	fooService := simple.NewFooService(fooRepository)
	barRepository := simple.NewBarRepository()
	barSevice := simple.NewBarService(barRepository)
	fooBarService := simple.NewFooBarService(fooService, barSevice)
	return fooBarService
}

func InitializedFooBar() *simple.FooBar {
	foo := simple.NewFoo()
	bar := simple.NewBar()
	fooBar := &simple.FooBar{
		Foo: foo,
		Bar: bar,
	}
	return fooBar
}

func InitializedHelloService() *simple.HelloService {
	sayHelloImpl := simple.NewSayHelloImpl()
	helloService := simple.NewHelloService(sayHelloImpl)
	return helloService
}

func InitializedFooBarUsingValue() *simple.FooBar {
	foo := _wireFooValue
	bar := _wireBarValue
	fooBar := &simple.FooBar{
		Foo: foo,
		Bar: bar,
	}
	return fooBar
}

var (
	_wireFooValue = fooValue
	_wireBarValue = barValue
)

func InitializedReader() io.Reader {
	reader := _wireFileValue
	return reader
}

var (
	_wireFileValue = os.Stdin
)

func InitializedConfiguration() *simple.Configuration {
	application := simple.NewApplication()
	configuration := application.Configuration
	return configuration
}

func InitializedConnection(name string) (*simple.Connection, func()) {
	file, cleanup := simple.NewFile(name)
	connection, cleanup2 := simple.NewConnection(file)
	return connection, func() {
		cleanup2()
		cleanup()
	}
}

// injector.go:

var fooSet = wire.NewSet(simple.NewFooRepository, simple.NewFooService)

var barSet = wire.NewSet(simple.NewBarRepository, simple.NewBarService)

var fooBarSet = wire.NewSet(simple.NewFoo, simple.NewBar)

var helloSet = wire.NewSet(simple.NewSayHelloImpl, wire.Bind(new(simple.SayHello), new(*simple.SayHelloImpl)))

var fooValue = &simple.Foo{}

var barValue = &simple.Bar{}
